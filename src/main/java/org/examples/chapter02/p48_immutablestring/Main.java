package org.examples.chapter02.p48_immutablestring;

public class Main {
    public static void main(String[] args) {
        // value 필드를 final로 지정하고 있고, 조작할 때마다 StringBuilder로 새로운 객체를 반환한다.
        String s = "string";

        // String은 값이 같으면 같은 값을 가리킨다. 문자열 리터럴을 상수 풀에 넣어두고 효율적으로 관리하는 것이다.
        // 만약 String이 가변이라면 리터럴을 수정했을 때 객체에 손상이 가게 된다.

        /*
        문자열이 불변의 장점
        1. 문자열을 캐싱할 수 있어서 힙 메모리와 가비지 컬렉터를 효율적으로 사용할 수 있다.
        2. 민감한 개인 정보 값을 수정하지 못하게 막는다.
        3. 모든 불변 객체는 본질적으로 thread-safe 하므로 손상이나 불일치 없이 문자열을 공유하고 조작할 수 있다.
        4. 해시 코드를 계속 새롭게 생성하지 않고 재사용할 수 있다. (해시 코드는 특정 동작을 해싱할 때마다 매번 새로 만든다. HashMap의 경우 put, get할 때 매번 키를 해싱하지만 문자열이라면 캐시에서 재사용한다.)
        5. 나쁜 의도로 클래스를 조작하는 일을 막는다. 클래스를 로딩할 때 Class.forName(String className)를 사용하는데, 불변인 String으로 인자를 받으므로 수정이 불가하다.
        */

        /*
        문자열 불변의 단점
        1. final로 선언되어 있어 확장이 불가하다. (하지만 StringUtils등의 유틸이 별도로 기능을 제공한다.)
        2. 민감한 데이터를 메모리에 오래 두고 있어 다른 의도로 쓰일 가능성이 있다. 비밀번호 등 민감한 내용이라면 char[]를 사용하자.
        3. 문자열 상수 풀은 다른 메모리에 비해 매우 적어서 OOM이 발생할 수 있다.
        */

        /*
        문자열은 진정한 불변인가?
        내부적으로 private final char[]를 이용해 값을 저장한다. Java 8의 리플렉션을 사용하면 이 값을 조작할 수 있다.
        즉, Java 8에 한해서는 진정한 불변은 아니다.
        */
    }
}
